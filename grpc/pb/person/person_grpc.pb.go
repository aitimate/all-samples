// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: pb/person/person.proto

package person

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonServiceClient is the client API for PersonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonServiceClient interface {
	Test(ctx context.Context, in *PersonReq, opts ...grpc.CallOption) (*PersonRes, error)
	TestStreamClient(ctx context.Context, opts ...grpc.CallOption) (PersonService_TestStreamClientClient, error)
	TestStreamServer(ctx context.Context, in *PersonReq, opts ...grpc.CallOption) (PersonService_TestStreamServerClient, error)
	TestStreamIO(ctx context.Context, opts ...grpc.CallOption) (PersonService_TestStreamIOClient, error)
}

type personServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonServiceClient(cc grpc.ClientConnInterface) PersonServiceClient {
	return &personServiceClient{cc}
}

func (c *personServiceClient) Test(ctx context.Context, in *PersonReq, opts ...grpc.CallOption) (*PersonRes, error) {
	out := new(PersonRes)
	err := c.cc.Invoke(ctx, "/person.PersonService/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personServiceClient) TestStreamClient(ctx context.Context, opts ...grpc.CallOption) (PersonService_TestStreamClientClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[0], "/person.PersonService/TestStreamClient", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceTestStreamClientClient{stream}
	return x, nil
}

type PersonService_TestStreamClientClient interface {
	Send(*PersonReq) error
	CloseAndRecv() (*PersonRes, error)
	grpc.ClientStream
}

type personServiceTestStreamClientClient struct {
	grpc.ClientStream
}

func (x *personServiceTestStreamClientClient) Send(m *PersonReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personServiceTestStreamClientClient) CloseAndRecv() (*PersonRes, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PersonRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personServiceClient) TestStreamServer(ctx context.Context, in *PersonReq, opts ...grpc.CallOption) (PersonService_TestStreamServerClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[1], "/person.PersonService/TestStreamServer", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceTestStreamServerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PersonService_TestStreamServerClient interface {
	Recv() (*PersonRes, error)
	grpc.ClientStream
}

type personServiceTestStreamServerClient struct {
	grpc.ClientStream
}

func (x *personServiceTestStreamServerClient) Recv() (*PersonRes, error) {
	m := new(PersonRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *personServiceClient) TestStreamIO(ctx context.Context, opts ...grpc.CallOption) (PersonService_TestStreamIOClient, error) {
	stream, err := c.cc.NewStream(ctx, &PersonService_ServiceDesc.Streams[2], "/person.PersonService/TestStreamIO", opts...)
	if err != nil {
		return nil, err
	}
	x := &personServiceTestStreamIOClient{stream}
	return x, nil
}

type PersonService_TestStreamIOClient interface {
	Send(*PersonReq) error
	Recv() (*PersonRes, error)
	grpc.ClientStream
}

type personServiceTestStreamIOClient struct {
	grpc.ClientStream
}

func (x *personServiceTestStreamIOClient) Send(m *PersonReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *personServiceTestStreamIOClient) Recv() (*PersonRes, error) {
	m := new(PersonRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonServiceServer is the server API for PersonService service.
// All implementations must embed UnimplementedPersonServiceServer
// for forward compatibility
type PersonServiceServer interface {
	Test(context.Context, *PersonReq) (*PersonRes, error)
	TestStreamClient(PersonService_TestStreamClientServer) error
	TestStreamServer(*PersonReq, PersonService_TestStreamServerServer) error
	TestStreamIO(PersonService_TestStreamIOServer) error
	mustEmbedUnimplementedPersonServiceServer()
}

// UnimplementedPersonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonServiceServer struct {
}

func (UnimplementedPersonServiceServer) Test(context.Context, *PersonReq) (*PersonRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedPersonServiceServer) TestStreamClient(PersonService_TestStreamClientServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStreamClient not implemented")
}
func (UnimplementedPersonServiceServer) TestStreamServer(*PersonReq, PersonService_TestStreamServerServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStreamServer not implemented")
}
func (UnimplementedPersonServiceServer) TestStreamIO(PersonService_TestStreamIOServer) error {
	return status.Errorf(codes.Unimplemented, "method TestStreamIO not implemented")
}
func (UnimplementedPersonServiceServer) mustEmbedUnimplementedPersonServiceServer() {}

// UnsafePersonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonServiceServer will
// result in compilation errors.
type UnsafePersonServiceServer interface {
	mustEmbedUnimplementedPersonServiceServer()
}

func RegisterPersonServiceServer(s grpc.ServiceRegistrar, srv PersonServiceServer) {
	s.RegisterService(&PersonService_ServiceDesc, srv)
}

func _PersonService_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PersonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonServiceServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/person.PersonService/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonServiceServer).Test(ctx, req.(*PersonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonService_TestStreamClient_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonServiceServer).TestStreamClient(&personServiceTestStreamClientServer{stream})
}

type PersonService_TestStreamClientServer interface {
	SendAndClose(*PersonRes) error
	Recv() (*PersonReq, error)
	grpc.ServerStream
}

type personServiceTestStreamClientServer struct {
	grpc.ServerStream
}

func (x *personServiceTestStreamClientServer) SendAndClose(m *PersonRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personServiceTestStreamClientServer) Recv() (*PersonReq, error) {
	m := new(PersonReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PersonService_TestStreamServer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PersonReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PersonServiceServer).TestStreamServer(m, &personServiceTestStreamServerServer{stream})
}

type PersonService_TestStreamServerServer interface {
	Send(*PersonRes) error
	grpc.ServerStream
}

type personServiceTestStreamServerServer struct {
	grpc.ServerStream
}

func (x *personServiceTestStreamServerServer) Send(m *PersonRes) error {
	return x.ServerStream.SendMsg(m)
}

func _PersonService_TestStreamIO_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PersonServiceServer).TestStreamIO(&personServiceTestStreamIOServer{stream})
}

type PersonService_TestStreamIOServer interface {
	Send(*PersonRes) error
	Recv() (*PersonReq, error)
	grpc.ServerStream
}

type personServiceTestStreamIOServer struct {
	grpc.ServerStream
}

func (x *personServiceTestStreamIOServer) Send(m *PersonRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *personServiceTestStreamIOServer) Recv() (*PersonReq, error) {
	m := new(PersonReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PersonService_ServiceDesc is the grpc.ServiceDesc for PersonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "person.PersonService",
	HandlerType: (*PersonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _PersonService_Test_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestStreamClient",
			Handler:       _PersonService_TestStreamClient_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "TestStreamServer",
			Handler:       _PersonService_TestStreamServer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TestStreamIO",
			Handler:       _PersonService_TestStreamIO_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/person/person.proto",
}
